import pandas as pd

# 1. 创建数据
# 使用一个列表来存储所有的数据记录
data = [
    # 微调前模型得分
    {'model': '微调前', '专业性': 8.0, '体贴性': 3.5, '逻辑流畅性': 9.5},
    {'model': '微调前', '专业性': 6.5, '体贴性': 3.0, '逻辑流畅性': 9.5},
    {'model': '微调前', '专业性': 9.0, '体贴性': 4.0, '逻辑流畅性': 9.5},
    {'model': '微调前', '专业性': 9.0, '体贴性': 3.5, '逻辑流畅性': 9.5},
    {'model': '微调前', '专业性': 9.5, '体贴性': 4.0, '逻辑流畅性': 9.5},
    {'model': '微调前', '专业性': 9.0, '体贴性': 3.5, '逻辑流畅性': 9.5},
    {'model': '微调前', '专业性': 9.0, '体贴性': 4.0, '逻辑流畅性': 9.5},
    {'model': '微调前', '专业性': 9.0, '体贴性': 4.0, '逻辑流畅性': 9.5},
    {'model': '微调前', '专业性': 10.0, '体贴性': 8.0, '逻辑流畅性': 9.5},
    {'model': '微调前', '专业性': 10.0, '体贴性': 7.0, '逻辑流畅性': 9.5},

    # 微调后模型得分
    {'model': '微调后', '专业性': 7.5, '体贴性': 9.5, '逻辑流畅性': 8.5},
    {'model': '微调后', '专业性': 6.0, '体贴性': 6.5, '逻辑流畅性': 7.0},
    {'model': '微调后', '专业性': 6.5, '体贴性': 8.0, '逻辑流畅性': 7.0},
    {'model': '微调后', '专业性': 4.0, '体贴性': 7.5, '逻辑流畅性': 9.0},
    {'model': '微调后', '专业性': 4.5, '体贴性': 5.5, '逻辑流畅性': 5.0},
    {'model': '微调后', '专业性': 7.0, '体贴性': 10.0, '逻辑流畅性': 9.5},
    {'model': '微调后', '专业性': 2.5, '体贴性': 5.0, '逻辑流畅性': 6.5},
    {'model': '微调后', '专业性': 8.5, '体贴性': 9.5, '逻辑流畅性': 9.5},
    {'model': '微调后', '专业性': 0.0, '体贴性': 1.0, '逻辑流畅性': 8.5},
    {'model': '微调后', '专业性': 4.0, '体贴性': 5.0, '逻辑流畅性': 7.0},
]

# 2. 使用Pandas库进行数据分析
# 将数据列表转换为Pandas DataFrame，方便进行分组和计算
df = pd.DataFrame(data)

# 3. 定义一个函数来计算并打印结果
def print_analysis_results(model_name, model_df):
    """
    计算并打印指定模型在各个维度上的统计数据
    :param model_name: 模型的名称 (str)
    :param model_df: 包含模型数据的DataFrame
    """
    print(f"--- {model_name}模型 数据分析结果 ---")
    
    # 需要分析的维度列表
    criteria = ['专业性', '体贴性', '逻辑流畅性']
    
    for criterion in criteria:
        # 提取该维度的数据列
        scores = model_df[criterion]
        
        # 计算平均数、最高分和最低分
        average_score = scores.mean()
        max_score = scores.max()
        min_score = scores.min()
        
        # 打印格式化的结果
        print(f"  📊 维度: {criterion}")
        print(f"     - 平均分: {average_score:.2f}")
        print(f"     - 最高分: {max_score:.2f}")
        print(f"     - 最低分: {min_score:.2f}")
        print("-" * 20)
    print("\n")

# 4. 分别对两个模型进行分析
# 筛选出"微调前"模型的数据
pre_tuned_df = df[df['model'] == '微调前']
# 筛选出"微调后"模型的数据
fine_tuned_df = df[df['model'] == '微调后']

# 调用函数打印两个模型的分析结果
print_analysis_results("微调前", pre_tuned_df)
print_analysis_results("微调后", fine_tuned_df)